class Solution {
    class Pair
    {
        int n;
        int wt;
        Pair(int n, int wt)
        {
            this.n = n;
            this.wt = wt;
        }
    }

    public void topo(int node, int[] visited, Stack<Integer> st, 
    ArrayList<ArrayList<Pair>> adlist)
    {
        visited[node] = 1;
        
        for(int i = 0 ; i< adlist.get(node).size(); i++)
        {
            int nbr = adlist.get(node).get(i).n;
            if(visited[nbr] == 0) 
                topo(nbr, visited, st, adlist);
        }
        
        st.push(node);
        
    }
	public int[] shortestPath(int N,int M, int[][] edges) 
	{
		//Code here
		ArrayList<ArrayList<Pair>> adlist = new ArrayList<>();
		
		int[] visited = new int[N];
		int[] dist = new int[N];
		
		
		for(int i = 0; i < N; i++)
		{
		    adlist.add(new ArrayList<Pair>());
		}
		
	    for(int i = 0; i <edges.length; i++)
	    {
	        int u = edges[i][0];
	        int v = edges[i][1];
	        int w = edges[i][2];
	        
	        adlist.get(u).add(new Pair(v, w));
	       // adlist.get(v).add(new Pair(u, w));
	    }
		
		Stack<Integer> st = new Stack<>();
		for(int i = 0; i < N;i ++)
		{
		    if(visited[i]==0)
		    {
		        topo(i, visited, st, adlist);
		    }
		}
		
		for(int i = 0 ; i < N; i++)
		{
		    dist[i] = (int)1e9;
		}
		
		dist[0] = 0;
		while(!st.isEmpty())
		{
		    int node = st.pop();
		  //  int wt = adlist.get(node).wt;
		    for(int i = 0 ; i < adlist.get(node).size(); i++)
		    {
		        int wt = adlist.get(node).get(i).wt;
		        int nbr = adlist.get(node).get(i).n;
		        if(dist[node] + wt < dist[nbr])
		        {
		            dist[nbr] = wt + dist[node];
		            st.push(nbr);
		        }
		    }
		}
		
		for(int i = 0 ; i < N; i++)
		{
		    if(dist[i] == (int)1e9) dist[i] = -1;
		}
		
		return dist;
	}
}

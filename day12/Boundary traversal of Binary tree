import java.util.* ;
// import java.awt.Image;
import java.io.*; 
/************************************************************

    Following is the Binary Tree node structure:
    
   class TreeNode {
	    int data;
	    TreeNode left;
	    TreeNode right;

	    TreeNode(int data) {
		    this.data = data;
		    this.left = null;
		    this.right = null;
	    }

    }

************************************************************/

import java.util.ArrayList;

// import javax.swing.tree.TreeNode;

// import com.sun.tools.javac.code.Attribute.Array;

// import org.graalvm.compiler.hotspot.IsGraalPredicate;

public class Solution {

	public static boolean isLeaf(TreeNode root)
	{
		if(root.left == null && root.right == null) return true;
		else return false;
	}

	public static void addLeftboundary(ArrayList<Integer> res, TreeNode root)
	{
		TreeNode curr = root.left;

		while(curr!=null)
		{
			if(isLeaf(curr) == false) res.add(curr.data);
			if(curr.left!=null) curr = curr.left;
			else curr = curr.right;
		}

		// System.out.println(res);
	}

	public static void addLeafNodes(ArrayList<Integer> res, TreeNode root)
	{
		if(isLeaf(root))
		{
			res.add(root.data);
			return;
		}

		if(root.left!=null) addLeafNodes(res, root.left);
		if(root.right!=null) addLeafNodes(res, root.right);

		// System.out.println(res);
	}

	public static void addRightboundary(ArrayList<Integer> res, TreeNode root)
	{
		TreeNode curr = root.right;
		ArrayList<Integer> temp = new ArrayList<>();

		while(curr!=null)
		{
			if(isLeaf(curr) == false) temp.add(curr.data);
			if(curr.right!=null) curr = curr.right;
			else curr = curr.left;
		}

		for(int i = temp.size()-1; i >=0 ; i--)
		{
			res.add(temp.get(i));
		}

		// System.out.println(res);
	}
	public static  ArrayList<Integer> traverseBoundary(TreeNode root){
		// Write your code here
		ArrayList<Integer> ans = new ArrayList<>();
		if(isLeaf(root) == false) ans.add(root.data);
		addLeftboundary(ans, root);
		addLeafNodes(ans, root);
		addRightboundary(ans, root);
		// System.out.println(ans + "Ans");
		return ans;


	}
}

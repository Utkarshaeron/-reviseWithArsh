class Solution {
    
    static class Pair{
        int nd;
        int wt;
        Pair(int nd, int wt)
        {
            this.nd = nd;
            this.wt = wt;
        }
    }
    public static List<Integer> shortestPath(int n, int m, int edges[][]) {
        // code here
        
        List<Integer> list = new ArrayList<>();
        
        ArrayList<ArrayList<Pair>> adlist = new ArrayList<>();
        
        for(int i = 0 ; i <= n; i++)
        {
            adlist.add(new ArrayList<Pair>());
        }
        
        
        for(int i = 0 ; i < m; i ++)
        {
            int u = edges[i][0];
            int v= edges[i][1];
            int w = edges[i][2];
            adlist.get(u).add(new Pair(v,w));
            adlist.get(v).add(new Pair(u,w));
        }
        
        PriorityQueue<Pair> pq = new PriorityQueue<Pair>((x,y) -> x.wt-y.wt);
        int[] dist = new int[n+1];
        int[] parent = new int[n+1];
        
        for(int i = 1 ; i <= n; i++)
        {
            dist[i] = (int)1e9;
            parent[i] = i;
        }
        
        dist[1] = 0;
        pq.add(new Pair(1, 0));
        
        while(!pq.isEmpty())
        {
            Pair mp = pq.poll();
            int node = mp.nd;
            int dis = mp.wt;
            
            for(int i = 0 ; i < adlist.get(node).size(); i++)
            {
                int nbr = adlist.get(node).get(i).nd;
                int wt = adlist.get(node).get(i).wt;
                
                if(dis + wt < dist[nbr])
                {
                    dist[nbr] = dis + wt;
                    pq.add(new Pair(nbr, dist[nbr]));
                    parent[nbr] = node;
                }
            }
        }
        
        if(dist[n] == (int)1e9)
        {
            list.add(-1);
            return list;
        }
        
        int Nd = n;
        
        while(parent[Nd]!=Nd)
        {
            list.add(Nd);
            Nd = parent[Nd];
        }
        
        list.add(1);
        Collections.reverse(list);
        return list;
        
        
        
        
        
        
        
        
    }
}

class Solution {
    class Pair
    {
        int r;
        int c;

        Pair(int r, int c)
        {
            this.r = r;
            this.c= c;
        }
    }
    public int[][] floodFill(int[][] image, int sr, int sc, int color) 
    {
        int[][]ans = image;
        int inicolor = image[sr][sc];
        int n = image.length, m = image[0].length;

        int[] drow = { -1, 0 , + 1, 0 };
        int[] dcol = {0 ,+1, 0 , -1};
        Queue<Pair> que = new ArrayDeque<>();
        que.add(new Pair(sr, sc));
        ans[sr][sc] = color;

        while(!que.isEmpty())
        {
            
            Pair mp = que.poll();
            int row = mp.r;
            int col = mp.c;

            for(int i = 0 ; i <4; i++)
            {
                int nrow = row + drow[i];
                int ncol = col + dcol[i];

                if(nrow >=0 && nrow < n && ncol >=0 && ncol < m
                    && image[nrow][ncol] == inicolor &&
                    ans[nrow][ncol]!= color)
                    {
                        System.out.println(nrow + " " + ncol +  " " + i+ " nrow & ncol && i");
                        ans[nrow][ncol] = color;
                        // System.out.println(i + " i");
                        que.add(new Pair(nrow, ncol));
                        
                    }
            }
        }

        for(int i = 0; i < n; i++)
        {
            for(int j = 0 ;j < m; j++)
            {
                System.out.print(ans[i][j] + " ");
            }
            System.out.println();
        }
        return ans;

        
    }
}

class Solution {
    class Pair
    {
        int r;
        int c;
        int tm;
        Pair(int r , int c, int tm)
        {
            this.r = r;
            this.c = c;
            this.tm  = tm;
        }
    }

    public int orangesRotting(int[][] grid)
     {
         int n = grid.length;
         int m = grid[0].length;
         Queue<Pair> que = new ArrayDeque<>();

         int[][] visited = new int[n][m];

         for(int i = 0 ; i < n ;i ++)
         {
             for(int j = 0; j < m;j ++)
             {
                 if(grid[i][j] == 2)
                 {
                     que.add(new Pair(i , j , 0));
                     visited[i][j] = 2;
                 }
                 else visited[i][j] = 0;
             }
         }
        

            int[] drow = { -1, 0 , + 1, 0};
            int[] dcol = { 0, +1, 0, -1};
            
            // que.add(new Pair(0 , 0 , 0));
            int t = 0;

            while(!que.isEmpty())
            {
                Pair mp = que.poll();
                int row = mp.r;
                int col = mp.c;
                int time = mp.tm;
                t = Math.max(t, time);

                for(int i = 0 ; i < 4; i++)
                {
                   int nrow = row + drow[i];
                   int ncol = col + dcol[i];

                   if( nrow >=0 && nrow < n && ncol >=0 && ncol < m
                        && visited[nrow][ncol]!=2 && grid[nrow][ncol] == 1)
                        {
                            que.add(new Pair(nrow, ncol, time +1));
                            visited[nrow][ncol] = 2;

                        }
                }
            }

            for(int i = 0 ; i < n; i++)
            {
                for(int j= 0 ; j< m; j++)
                {
                    if(visited[i][j]!=2 && grid[i][j] ==1) return -1;
                
                }
            }

            return t;
     
         }
    }

class Solution {
    class Pair{
        int r;
        int c;
        Pair(int r , int c)
        {
            this.r = r;
            this.c = c;
        }
    }

    public void dfs(int i, int j , int[] drow, int[] dcol, int[][] visited,
                        char[][] board)
    {
        visited[i][j] = 1;
        int n = board.length;
        int m = board[0].length;

        for(int it = 0 ; it < 4; it++)
        {
            int nrow = i + drow[it];
            int ncol = j + dcol[it];
            if(nrow >=0 && nrow < n && ncol >=0 && ncol < m && visited[nrow][ncol]!=1
                &&  board[nrow][ncol] == 'O')
                {
                    dfs(nrow, ncol, drow, dcol, visited, board);
                }
        }
    }

    public void solve(char[][] board) 
    {
        int n = board.length;
        int m = board[0].length;
        int[][] visited = new int[n][m];
        int[]drow = {-1, 0 , +1, 0};
        int[] dcol = { 0, +1, 0, -1};

        for(int i = 0 ; i < n ;i++)
        {
            for(int j = 0 ; j < m;j++)
            {
                if((i == 0 || j == 0 || i == n -1 || j == m-1) && board[i][j] == 'O')
                {
                    if(visited[i][j]!=1)
                    {
                        dfs(i, j, drow, dcol, visited, board);
                    }
                }
           
            }
        }

        for(int i = 0 ; i < n; i++)
        {
            for(int j = 0; j < m ; j++)
            {
                if(visited[i][j] == 0 && board[i][j] == 'O')
                {
                    board[i][j] ='X';
                }
            }
        }
    }
}

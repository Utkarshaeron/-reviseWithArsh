class Solution {
    class Pair
    {
        int r;
        int c;
        Pair(int r,int c)
        {
            this.r =r;
            this.c = c;
        }
    }
    public int numEnclaves(int[][] grid) 
    {
        int n = grid.length;
        int m = grid[0].length;

        int[][] visited = new int[n][m];

        Queue<Pair> pq = new ArrayDeque<>();    

        for(int i = 0 ;i< n ;i ++)
        {
            for(int j = 0; j < m ; j++)
            {
                if(grid[i][j] == 1 && (i == 0 || j== 0 || i == n-1 || j == m-1))
                {
                    pq.add(new Pair(i ,j));
                    visited[i][j] =1;
                }
                else
                {
                    visited[i][j] = 0;
                }
            }
        }

        int[]drow = {-1, 0, +1, 0};
        int[] dcol = {0, +1, 0 , -1};

        while(!pq.isEmpty())
        {
            Pair mp = pq.poll();
            int row = mp.r;
            int col = mp.c;
            for(int i = 0 ; i <4; i++)
            {
                int nrow = row + drow[i];
                int ncol = col + dcol[i];
                if(nrow >= 0 && nrow < n && ncol >=0 && ncol < m &&
                    visited[nrow][ncol] == 0 && grid[nrow][ncol] == 1)
                    {
                        visited[nrow][ncol] = 1;
                        pq.add(new Pair(nrow, ncol));
                    }
            }

        }

        int count = 0; 
        for(int i = 0; i < n ; i++)
        {
            for(int j = 0; j< m; j++)
            {
                if(visited[i][j] == 0 && grid[i][j] == 1)
                {
                    count++;
                }
            }
        }

        return count;
    }
}

class Solution {
    class Pair
    {
        int r;
        int c;
        int s;
        Pair(int r, int c, int s)
        {
            this.r = r;
            this.c = c;
            this.s = s;
        }
    }
    public int[][] updateMatrix(int[][] mat) 
    {
        int n= mat.length, m = mat[0].length;
        int[][] vis = new int[n][m];
        int[][] steps = new int[n][m];

        Queue<Pair> pq = new ArrayDeque<>();

        for(int i = 0 ; i <n; i++)
        {
            for(int j = 0; j < m ; j++)
            {
                if(mat[i][j] == 0)
                {
                    pq.add(new Pair(i, j, 0));
                    vis[i][j] = 1;
                }
                else
                {
                    vis[i][j] = 0;
                }
            }
        }
        
        int[] drow =  { -1,  0, +1, 0};
        int[] dcol = { 0, +1, 0, -1};

        while(!pq.isEmpty())
        {
            Pair mp = pq.poll();
            int row= mp.r;
            int col = mp.c;
            int stp= mp.s;

            steps[row][col] = stp;

            for(int i = 0; i < 4; i++)
            {
                int nrow = row + drow[i];
                int ncol = col + dcol[i];

                if(nrow>=0 && nrow < n && ncol >=0 && ncol < m
                && vis[nrow][ncol] == 0)
                {
                    vis[nrow][ncol]=1;
                    pq.add(new Pair(nrow, ncol, stp + 1));
                }
            }
        }

        return steps;
    }
}

class Solution {
    class Pair{
        int r;
        int c;
        Pair(int r , int c)
        {
            this.r = r;
            this.c = c;
        }
    }

    public void solve(char[][] board) 
    {
        int n = board.length;
        int m = board[0].length;

        Queue<Pair> que = new ArrayDeque<>();
        int[][] visited = new int[n][m];

        for(int i = 0 ; i < n ;i++)
        {
            for(int j = 0 ; j < m;j++)
            {
                if((i == 0 || j == 0 || i == n -1 || j == m-1) && board[i][j] == 'O')
                {
                    que.add(new Pair(i, j));
                    visited[i][j] = 1;
                }
                else
                {
                    visited[i][j] = 0;
                }
               
            }
        }

        int[]drow = {-1, 0 , +1, 0};
        int[] dcol = {0, +1, 0, -1};

        while(!que.isEmpty())
        {
            Pair mp = que.poll();
            int row = mp.r;
            int col = mp.c;

            for(int i = 0;i < 4; i++)
            {
                int nrow= row + drow[i];
                int ncol = col + dcol[i];

                if(nrow>=0 && nrow < n && ncol >=0 && ncol < m &&
                    visited[nrow][ncol] == 0 &&  board[nrow][ncol] == 'O')
                    {
                        que.add(new Pair(nrow, ncol));
                        visited[nrow][ncol] = 1;
                    }
            }
        }

        for(int i = 0 ; i < n; i++)
        {
            for(int j = 0; j < m; j++)
            {
                if(visited[i][j]==0 && board[i][j]=='O')
                {
                    board[i][j] = 'X';
                }
            }
        }

        // return board;
    }
}

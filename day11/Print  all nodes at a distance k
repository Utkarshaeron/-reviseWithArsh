/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */


class Solution {

    public void markParents(TreeNode root, Map<TreeNode, TreeNode> parent)
    {
    
        Queue<TreeNode> que = new ArrayDeque<>();
        que.add(root);

        while(!que.isEmpty())
        {
            TreeNode node = que.remove();
            if(node.left!=null)
            {
                que.add(node.left);
                parent.put(node.left, node);
          
            }

            if(node.right!=null)
            {
                que.add(node.right);
                parent.put(node.right, node);
                
            }
        
        }

    }


    public List<Integer> distanceK(TreeNode root, TreeNode target, int k) 
    {
        List<Integer> list = new ArrayList<>();
        // if(root == null) return list;

       

        Map<TreeNode, TreeNode> parent = new HashMap<>();
        markParents(root, parent);

       
        Map<TreeNode, Boolean> visited = new HashMap<>();
        visited.put(target, true);
        int curr = 0;

        Queue<TreeNode> mq = new ArrayDeque<>();
        mq.add(target);
         

        while(!mq.isEmpty())
        {
            int mqs = mq.size();
            if(curr == k) break;
            curr++;
            // System.out.println()
            for(int i = 0 ; i< mqs; i++)
            {
                // System.out.println(mq.peek().val + " mq.peek()");
                TreeNode node = mq.remove();

                if(node.left!=null && visited.get(node.left) == null)
                {
                    mq.add(node.left);
                    visited.put(node.left, true);
                }

                if(node.right!=null && visited.get(node.right) == null)
                {
                    mq.add(node.right);
                    visited.put(node.right, true);
                }

                if(parent.get(node)!=null && visited.get(parent.get(node)) == null)
                {
                    mq.add(parent.get(node));
                    visited.put(parent.get(node), true);
                }

            }

            
        }

        System.out.println(mq.size() + " mq.size()");
        while(!mq.isEmpty())
        {
        
            TreeNode currn = mq.poll();
            list.add(currn.val);
        }

        return list;
    }

    
}

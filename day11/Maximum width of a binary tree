
 class Pair
 {
     TreeNode node;
     int idx;

        Pair(TreeNode node, int idx)
        {
            this.node = node;
            this.idx = idx;
        }  
 }

class Solution {

    public int widthOfBinaryTree(TreeNode root) 
    {
        Queue<Pair> mq = new ArrayDeque<>();
        mq.add(new Pair(root, 0));
        int ans = 0;

        while(!mq.isEmpty())
        {
            int mqs = mq.size();
            int min = mq.peek().idx;
            int first = 0, last = 0;
            for(int i = 0 ; i <mqs; i++)
            {   
                int curr_idx = mq.peek().idx - min;
                TreeNode node = mq.peek().node;
                mq.remove();

                if(node.left!=null)
                {
                    mq.add(new Pair(node.left, 2*curr_idx +1));
                }
                if(node.right!=null)
                {
                    mq.add(new Pair(node.right, 2*curr_idx+2));
                }
                if(i == 0) first = curr_idx;
                if(i == mqs-1) last = curr_idx;
            }

            ans = Math.max(ans, last - first +1);

        }

        return ans;
    }
}
